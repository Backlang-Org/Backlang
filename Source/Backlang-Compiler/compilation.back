import System;
import System.Collections;
import System.Collections.Generic;

module TesT;

struct Point {
	X : u32;
	Y : u32;
}

#matchCode(12) {
	struct Point {
		X : u32;
		Y : u32;
	}
}

#someMacro {
	struct Point {
		X : u32;
		Y : u32;
	}
}

implement Point {
	func distance(other : Point) static -> Point {
		
	}

	func add(lhs : Point, rhs : Point) operator -> Point {
		
	}

	func toString() -> string {
		
	}
}

implement u8..u64, f64, i16..i64 {
	func someTest() -> SELF {
		#matchCode(somevalue) {
			msg += "Hello";
			let msg : string = concatId(a, b, c);
		}
	}
}

func main() static -> none {
	let msg : string = concatId(a, b, c);
	let name : string = nameof(msg);
	
	nameof(msg);

	concatId(a, b, c);
	
	#someMacro {
		msg += "Hello";
		
		let msg : string = concatId(a, b, c);
	}

	msg += "Hello";
	msg -= "Hello";
	
	print("something new");

	#quote {
		print(msg);
	}
}

func println(arg : string) static -> none {
	print(msg + "\n");
}

