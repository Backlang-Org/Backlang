
@Log
func main() public static -> none {
	//hello world
	let msg : i32 = 24;
	let dd : string = "Hello World";
	let mut ff : bool = true;
	let mut another : bool = false;

	ff <-> another;

	print(true);
	print(1);
	print(3.14);
	print('c');
	print("Hello");
}

func main() static -> none {}
func main() static -> none {}


func cool(isCool: bool = true) protected static -> bool {
	return false;
}


@Derive(Something)
@DoSomeWork
class protected abstract Person {
	let name: string;

	func hehe() abstract -> string;

	func notHere() extern -> bool;
}

class private VeryImportantPerson : Person {
	
}

implement VeryImportantPerson {
	func hehe() override -> string { }
}

struct static private Point {
	@Useful
	let mut x: i32 = 0;
	let mut y: i32 = 1;
	let mut z: i32;
}

interface ISerializable {
	func toBytes() -> u8;
}

class Location : Point, ISerializable {
	@Transform
	let worldName: string = "world"; 
}

implement Location {
	func new(@FieldTransform() x: i32, y: i32, z: i32, worldName: string) static -> Location {
		
	}
	
	func toBytes() -> u8 {
		x |> isLetter() |> print();
	}
}

implement u8 {
	func hello(some : u8) {
		
	} 
}

enum Days {
	@Description("First Day Of Week")
	Monday = 1, 
	Tuesday, Wednesday, Thursday, Friday, Saturday = 10, Sunday
}
