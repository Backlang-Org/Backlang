func main() {
	let something : i32* = 12;
	doSomething();
	return 0;
}

func print<T>(value : T)
	for T : i8-i32 {
	
}

class SomeModel : ViewModel() {
	notify(Name : string);
}


type int = i32;
const bits = 32;

global flags : Flags = #EAX;
global behavior : Flags = &250;

func doSomething() {
	print("Hello World");
	let arr = [12, 42, 3];

	print(arr[0]);


	/*
	multi
	line
	comment
	*/

	while true { 
		doSomething(2);	
	}

	for x : i32 in 1..12 {
		print(x);
	}

	for x in arr {
		print(x);
	}
}

enum Colors {
	Red = 0xFF0000,
	Green = 0x00FF00,
	Blue = 0x0000FF
}

bitfield Flags {
	DivideByZero = 0,
	IsZero = 1,
}

enum Instructions {
	Invalid,
	Move = 1 << 12,
	Pop,
}

func tests(something : i32) { //check if something is none, if not return none

	let kkk = sizeof<Colors>;
	let mm : i32 = default;
	let mn = default<i32>;

	let a = 12;
	let mut b : i32 = 42;
	let c = &a;

	let d : list<i32> = [];

	let e = list<list<i32>> = [];

	a <-> b;

	a = b % 3;

	if a <= 12 and a >= 13 {

	}
	else {
	
	}

	let result = match a with
		12 => 13,
		> 13 => 15,
		_ => 0,
		[1, .. , 3]; // need to be implemented

	return none;
}