import Memory;
import Limits;
import Keyboard;

struct Terminal {
	End = Width * Height;
	Width = 80;
	Height = 25;

	CursorX = 0;
	CursorY = 0;
}

implement static Terminal {
	func write(char : i8) {
		let address : u32* = CursorY * Width + CursorX;

		*address = char;

		CursorX += 1;

		if CursorX = Width  {
			CursorX = 0; 
			CursorY++;
		}
		if CursorY == Height {
			CursorY = 0;
			CursorX = 0;
		}
	}

	func write(str : string) {
		for c in str) {
			write(c);
		}
	}

	func writeln(str : string) {
		write(str);
		
		CursorY += 1;
		CursorX = 0;
	}

	func readChar() {
		for i in 0..u8::Max {
			if Keyboard::isKeyDown(i) {
				return i;
			}
		}
	}

	func clear() {
		Memory::clear(0, End);

		CursorX = 0;
		CursorY = 0;
	}

	func setCursorPosition(top : u32, left : u32) {
		CursorX = left;
		CursorY = top;
	}

	func getCursorPosition() {
		return Tuple<u32, u32>::new(CursorX, CursorY);
	}
}